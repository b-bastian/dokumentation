"use strict";(self.webpackChunkdoku=self.webpackChunkdoku||[]).push([[1622],{2352:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=n(4848),i=n(8453);const s={date:new Date("2023-12-07T00:00:00.000Z"),icon:"project-roadmap",title:"Telefon- & Adressbuch"},l="Telefon- & Adressbuch",a={id:"projects/xmlProject",title:"Telefon- & Adressbuch",description:"Smarte Ziele (3)",source:"@site/docs/projects/xmlProject.md",sourceDirName:"projects",slug:"/projects/xmlProject",permalink:"/docs/projects/xmlProject",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/projects/xmlProject.md",tags:[],version:"current",frontMatter:{date:"2023-12-07T00:00:00.000Z",icon:"project-roadmap",title:"Telefon- & Adressbuch"},sidebar:"tutorialSidebar",previous:{title:"Fahrtenbuch",permalink:"/docs/projects/xmlBook"},next:{title:"Alternativen bewerten",permalink:"/docs/theorie/bewerten"}},d={},c=[{value:"Smarte Ziele (3)",id:"smarte-ziele-3",level:2},{value:"<code>.xml</code>-Datei",id:"xml-datei",level:2},{value:"Allgemeines",id:"allgemeines",level:4},{value:"Features",id:"features",level:4},{value:"Arbeitspakete (Sammlung)",id:"arbeitspakete-sammlung",level:4},{value:"Ordnerstruktur (bearbeitete Dateien)",id:"ordnerstruktur-bearbeitete-dateien",level:3},{value:"Telefonbuch.Lib",id:"telefonbuchlib",level:4},{value:"Telefonbuch.Core",id:"telefonbuchcore",level:4},{value:"Telefonbuch.MApp",id:"telefonbuchmapp",level:4},{value:"Wichtige Dateien | Telefonbuch.Lib",id:"wichtige-dateien--telefonbuchlib",level:3},{value:"IRepository.cs",id:"irepositorycs",level:4},{value:"Entry.cs",id:"entrycs",level:4},{value:"XmlRepository.cs",id:"xmlrepositorycs",level:4}];function o(t){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"telefon---adressbuch",children:"Telefon- & Adressbuch"})}),"\n",(0,r.jsx)(e.h2,{id:"smarte-ziele-3",children:"Smarte Ziele (3)"}),"\n",(0,r.jsxs)(e.h2,{id:"xml-datei",children:[(0,r.jsx)(e.code,{children:".xml"}),"-Datei"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n<adressbook>\n  <adress id="c4d179e9-8ed9-4069-85fd-79b9a67c2f9a" firstname="Bastian" lastname="Brugger" fullname="Bastian Brugger" adress="Sagm\xfchlfeld 26" plz="5723" place="Uttendorf" number="06606106711" favorite="true" />\n</adressbook>\n'})}),"\n",(0,r.jsx)(e.h4,{id:"allgemeines",children:"Allgemeines"}),"\n",(0,r.jsx)(e.p,{children:"Handelt es sich um ein Projekt?"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Kein Alltagsgesch\xe4ft"}),"\n",(0,r.jsx)(e.li,{children:"klares Ziel"}),"\n",(0,r.jsx)(e.li,{children:"Komplexit\xe4t ist gegeben"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Kontakte hinzuf\xfcgen"}),"\n",(0,r.jsx)(e.li,{children:"Kontaktdaten \xe4ndern"}),"\n",(0,r.jsx)(e.li,{children:"Kontakte l\xf6schen"}),"\n",(0,r.jsx)(e.li,{children:"Kontakte anzeigen, filtern & suchen"}),"\n",(0,r.jsx)(e.li,{children:"Kontakte werden beim Start der App geladen"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"arbeitspakete-sammlung",children:"Arbeitspakete (Sammlung)"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Interface definieren"}),"\n",(0,r.jsx)(e.li,{children:"Services"}),"\n",(0,r.jsx)(e.li,{children:"Klassen definieren"}),"\n",(0,r.jsx)(e.li,{children:'XML-Pages erstellen (optisch "sch\xf6n")'}),"\n",(0,r.jsx)(e.li,{children:"ViewModels"}),"\n",(0,r.jsx)(e.li,{children:"dauerhafte Speicherung"}),"\n",(0,r.jsx)(e.li,{children:"Models"}),"\n",(0,r.jsx)(e.li,{children:"Auslagerung einer/der Gesch\xe4ftslogik in eine Bibliothek"}),"\n",(0,r.jsx)(e.li,{children:"Beitr\xe4ge laden"}),"\n",(0,r.jsxs)(e.li,{children:["Release","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Plattform(en)"}),"\n",(0,r.jsx)(e.li,{children:"Download, App Store oder Browser"}),"\n",(0,r.jsx)(e.li,{children:"Android, iOS, Windows, macOS"}),"\n",(0,r.jsx)(e.li,{children:"Versionierung"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"ordnerstruktur-bearbeitete-dateien",children:"Ordnerstruktur (bearbeitete Dateien)"}),"\n",(0,r.jsx)(e.h4,{id:"telefonbuchlib",children:"Telefonbuch.Lib"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Interfaces","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"IRepository.cs"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["Models","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Entry.cs"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["Services","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"XmlRepository.cs"}),"\n",(0,r.jsx)(e.li,{children:"DatabaseRepository.cs"}),"\n",(0,r.jsx)(e.li,{children:"EntriesContext.cs"}),"\n",(0,r.jsx)(e.li,{children:"CsvRepository.cs"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"telefonbuchcore",children:"Telefonbuch.Core"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Services","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"IAlertService.cs"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["ViewModels","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"MainViewModel.cs"}),"\n",(0,r.jsx)(e.li,{children:"ManageEntryViewModel.cs"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"telefonbuchmapp",children:"Telefonbuch.MApp"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Pages","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"MainPage.xaml"}),"\n",(0,r.jsx)(e.li,{children:"MainPage.xaml.cs"}),"\n",(0,r.jsx)(e.li,{children:"ManageEntryPage.xaml"}),"\n",(0,r.jsx)(e.li,{children:"ManageEntryPage.xaml.cs"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.li,{children:"MauiProgram.cs"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"wichtige-dateien--telefonbuchlib",children:"Wichtige Dateien | Telefonbuch.Lib"}),"\n",(0,r.jsx)(e.h4,{id:"irepositorycs",children:"IRepository.cs"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cs",children:"    List<Entry> LoadEntries();\n\n    bool Save();\n\n    bool CreateEntry(Entry entry);\n\n    bool DeleteEntry(Entry entry);\n\n    bool UpdateEntry(Dictionary<string, string> updatedValues, Entry selectedEntry);\n\n    bool Update(Entry entry);\n\n    List<Entry> SearchEntries(string searchText);\n\n    List<Entry> SortEntries(string sortText);\n"})}),"\n",(0,r.jsx)(e.h4,{id:"entrycs",children:"Entry.cs"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cs",children:"    public string Id { get; set; } = string.Empty;\n\n    public string Firstname { get; set; } = string.Empty;\n\n    public string Lastname { get; set; }\n\n    public string Adress { get; set; } = string.Empty;\n\n    public int PLZ { get; set; } = 0;\n\n    public string Place { get; set; } = string.Empty;\n\n    public string Number { get; set; } = string.Empty;\n\n    public bool Favorite { get; set; } = false;\n"})}),"\n",(0,r.jsx)(e.h4,{id:"xmlrepositorycs",children:"XmlRepository.cs"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cs",children:'public string _file = string.Empty;\n\tprivate XElement _rootElement;\n\n\tpublic XmlRepository(string file)\n\t{\n\t\tthis._file = file;\n\n\t\tif (File.Exists(file)) {\n\t\t\tthis._rootElement = XElement.Load(file);\n\t\t} else {\n\t\t\tthis._rootElement = new XElement("adressbook");\n\t\t}\n\n\n\t}\n\n\tpublic List<Entry> LoadEntries()\n\t{\n\t\tif (File.Exists(this._file)) {\n\t\t\tthis._rootElement = XElement.Load(this._file);\n\t\t} else {\n\t\t\tthis._rootElement = new XElement("adressbook");\n\t\t}\n\n\t\tvar quellen = from adress in this._rootElement.Descendants("adress")\n\t\t\t\t\t  select new Entry() {\n\t\t\t\t\t\t  Id = (string?)adress.Attribute("id"),\n\t\t\t\t\t\t  Name = (string?)adress.Attribute("name"),\n\t\t\t\t\t\t  Adress = (string?)adress.Attribute("adress"),\n\t\t\t\t\t\t  PLZ = (int?)adress.Attribute("plz"),\n\t\t\t\t\t\t  Place = (string?)adress.Attribute("place"),\n\t\t\t\t\t\t  Number = (string?)adress.Attribute("number")\n\t\t\t\t\t  };\n\n\t\treturn quellen.ToList();\n\t}\n\n\tpublic bool CreateEntries(string name, string adress, int plz, string place, string number)\n\t{\n\t\tEntry entry = new Entry(name, adress, plz, place, number);\n\n\t\ttry {\n\t\t\tXElement node = new XElement("adress");\n\t\t\tnode.Add(new XAttribute("id", entry.Id));\n\t\t\tnode.Add(new XAttribute("name", entry.Name));\n\t\t\tnode.Add(new XAttribute("adress", entry.Adress));\n\t\t\tnode.Add(new XAttribute("plz", entry.PLZ));\n\t\t\tnode.Add(new XAttribute("place", entry.Place));\n\t\t\tnode.Add(new XAttribute("number", entry.Number));\n\n\n\t\t\tthis._rootElement.Add(node);\n\t\t\tthis._rootElement.Save(this._file);\n\n\t\t\treturn true;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic bool DeleteEntries(string entry, string entryToDelete)\n\t{\n\t\tvar deleteObject = from x in this._rootElement.Descendants("adress")\n\t\t\t\t\t\t   where (string)x.Attribute(entryToDelete) == entry\n\t\t\t\t\t\t   select x;\n\n\t\tif (!deleteObject.Any()) {\n\t\t\tDebug.WriteLine("Nichts gefunden");\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\tdeleteObject.Remove();\n\n\t\t\tthis._rootElement.Save(this._file);\n\n\t\t\treturn true;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\tpublic string UpdateEntries(string phoneNumber, string id, string valueToUpate, string updatedValue)\n\t{\n\t\tstring feedback = string.Empty;\n\n\t\t// Update an entry by phone number\n\t\tif (phoneNumber != null) {\n\t\t\tvar updateObjects = from x in this._rootElement.Descendants("adress")\n\t\t\t\t\t\t\t\twhere (string)x.Attribute("number") == phoneNumber\n\t\t\t\t\t\t\t\tselect x;\n\n\t\t\tif (!updateObjects.Any()) {\n\t\t\t\treturn feedback = $"No record found with phone number {phoneNumber}";\n\t\t\t}\n\n\t\t\tforeach (var updateObject in updateObjects) {\n\t\t\t\tforeach (var attribute in updateObject.Attributes()) {\n\t\t\t\t\tif (attribute.Name != "phoneNumber") {\n\t\t\t\t\t\tupdateObject.SetAttributeValue(valueToUpate, updatedValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._rootElement.Save(this._file);\n\n\t\t\treturn feedback = $"Updated entry with phone number {phoneNumber}";\n\t\t}\n\t\t// Update entry by Id\n\t\telse if (id != null) {\n\t\t\tvar updateObjects = from x in this._rootElement.Descendants("adress")\n\t\t\t\t\t\t\t\twhere (string)x.Attribute("id") == id\n\t\t\t\t\t\t\t\tselect x;\n\n\t\t\tif (!updateObjects.Any()) {\n\t\t\t\treturn feedback = $"No record found with ID {id}";\n\t\t\t}\n\n\t\t\tforeach (var updateObject in updateObjects) {\n\t\t\t\tforeach (var attribute in updateObject.Attributes()) {\n\t\t\t\t\tif (attribute.Name != "id") {\n\t\t\t\t\t\tupdateObject.SetAttributeValue(valueToUpate, updatedValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._rootElement.Save(this._file);\n\n\t\t\treturn feedback = $"Updated entry with Id {id}";\n\t\t} else {\n\t\t\treturn feedback = "Please specify either phone number or ID to update the record";\n\t\t}\n\t}\n\n\tpublic List<Entry> SearchEntry(string filterText)\n\t{\n\t\tvar entries = from x in this._rootElement.Descendants("adress")\n\t\t\t\t\t  select new Entry {\n\t\t\t\t\t\t  Id = (string)x.Attribute("id"),\n\t\t\t\t\t\t  Name = (string)x.Attribute("name"),\n\t\t\t\t\t\t  Adress = (string)x.Attribute("adress"),\n\t\t\t\t\t\t  PLZ = (int)x.Attribute("plz"),\n\t\t\t\t\t\t  Place = (string)x.Attribute("place"),\n\t\t\t\t\t\t  Number = (string)x.Attribute("number"),\n\t\t\t\t\t  };\n\n\t\tvar filteredEntries = entries.Where(x => !string.IsNullOrWhiteSpace(x.Name) && x.Name.StartsWith(filterText, StringComparison.CurrentCultureIgnoreCase));\n\n\t\tif (filteredEntries == null || filteredEntries.Count() <= 0) filteredEntries = entries.Where(x => !string.IsNullOrWhiteSpace(x.Adress) && x.Adress.StartsWith(filterText, StringComparison.CurrentCultureIgnoreCase));\n\t\telse return filteredEntries.ToList();\n\n\t\tif (filteredEntries == null || filteredEntries.Count() <= 0) filteredEntries = entries.Where(x => !string.IsNullOrWhiteSpace(Convert.ToString(x.PLZ)) && Convert.ToString(x.PLZ).StartsWith(filterText, StringComparison.CurrentCultureIgnoreCase));\n\t\telse return filteredEntries.ToList();\n\n\t\tif (filteredEntries == null || filteredEntries.Count() <= 0) filteredEntries = entries.Where(x => !string.IsNullOrWhiteSpace(x.Place) && x.Place.StartsWith(filterText, StringComparison.CurrentCultureIgnoreCase));\n\t\telse return filteredEntries.ToList();\n\n\t\tif (filteredEntries == null || filteredEntries.Count() <= 0) filteredEntries = entries.Where(x => !string.IsNullOrWhiteSpace(x.Number) && x.Number.StartsWith(filterText, StringComparison.CurrentCultureIgnoreCase));\n\t\telse return filteredEntries.ToList();\n\n\t\treturn filteredEntries.ToList();\n\t}\n\n\tpublic List<Entry> SortEntries(string toSort)\n\t{\n\t\tvar sortedList = from x in this._rootElement.Descendants("adress")\n\t\t\t\t\t\t orderby x.Attribute(toSort).Value\n\t\t\t\t\t\t select new Entry() {\n\t\t\t\t\t\t\t Name = (string)x.Attribute("name"),\n\t\t\t\t\t\t\t Adress = (string)x.Attribute("adress"),\n\t\t\t\t\t\t\t PLZ = (int)x.Attribute("plz"),\n\t\t\t\t\t\t\t Place = (string)x.Attribute("place"),\n\t\t\t\t\t\t\t Number = (string)x.Attribute("number")\n\t\t\t\t\t\t };\n\n\t\treturn sortedList.Distinct().ToList();\n\t}\n'})})]})}function u(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(o,{...t})}):o(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>l,x:()=>a});var r=n(6540);const i={},s=r.createContext(i);function l(t){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:l(t.components),r.createElement(s.Provider,{value:e},t.children)}}}]);