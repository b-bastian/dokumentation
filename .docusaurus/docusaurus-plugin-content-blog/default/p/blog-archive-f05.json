{"archive":{"blogPosts":[{"id":"/2023/10/17/arbeitsauftrag","metadata":{"permalink":"/blog/2023/10/17/arbeitsauftrag","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-10-17-arbeitsauftrag.md","source":"@site/blog/2023-10-17-arbeitsauftrag.md","title":"Arbeitsauftrag 17.10.2023","description":"Gründe für ein Projekt","date":"2023-10-17T00:00:00.000Z","tags":[],"readingTime":1.24,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2023-10-17T00:00:00.000Z","title":"Arbeitsauftrag 17.10.2023"},"unlisted":false,"nextItem":{"title":"Exceptions","permalink":"/blog/2023/09/19/exceptions"}},"content":"## Gründe für ein Projekt\n\nFolgende Gründe sprechen für die Durchführung einer Arbeit als Projekt:\n\n<!-- truncate -->\n\n- eine _individuelle_ Problemlösung ist notwendig (Standard kann **automatisiert** werden)\n- eine Innovation in einem Betrieb ist notwendig\n- Aufgaben sind **komplex**\n- es handelt sich **nicht** um das **Alltagsgeschäft** des Unternehmens\n\n## Eigenschaften eines Projekts\n\n- Es wird ein **klares Ziel** verfolgt.\n- Es gibt einen zuvor definierten Zeitrahmen. Die **Laufzeit** ist **begrenzt**.\n- Es handelt sich um eine **komplexe Aufgabe** (meist **neuartig**).\n- Es herrscht ein **soziales System (innen und außen)**. Die **Beziehungen im Projekt** und **außerhalb** müssten unterschieden werden\n- Die verfügbaren Ressourcen sind begrenzt (Personal, Geld, Material, Know-How,...)\n\n## Beispiele für ein Projekt\n\n1. **Entwicklung einer mobilen App:** Die Erstellung einer Anwendung für Smartphones oder Tablets, sei es für iOS, Android oder andere Plattformen. Zum Beispiel die Entwicklung einer Fitness-App, eines sozialen Netzwerks oder eines Spiele-Apps.\n\n2. **Website-Entwicklung:** Die Konzeption, Gestaltung und Programmierung einer Website, sei es für ein Unternehmen, eine E-Commerce-Plattform, ein Blog oder eine Informationsseite.\n\n3. **Software-Update oder -Migration:** Die Aktualisierung einer bestehenden Software auf eine neue Version oder die Migration einer Anwendung von einer Plattform auf eine andere, z. B. von einer On-Premises-Software zu einer Cloud-basierten Lösung.\n\n4. **Einführung eines ERP-Systems:** Die Implementierung eines Enterprise Resource Planning (ERP)-Systems, das in Unternehmen zur Verwaltung von Geschäftsprozessen und Ressourcen eingesetzt wird.\n\n5. **Sicherheitsaudit und -verbesserung:** Die Überprüfung und Verbesserung der Sicherheit einer bestehenden Software oder Website, um Schwachstellen und Sicherheitslücken zu identifizieren und zu beheben."},{"id":"/2023/09/19/exceptions","metadata":{"permalink":"/blog/2023/09/19/exceptions","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-09-19-exceptions.md","source":"@site/blog/2023-09-19-exceptions.md","title":"Exceptions","description":"Allgemeines","date":"2023-09-19T00:00:00.000Z","tags":[],"readingTime":2.155,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2023-09-19T00:00:00.000Z","title":"Exceptions"},"unlisted":false,"prevItem":{"title":"Arbeitsauftrag 17.10.2023","permalink":"/blog/2023/10/17/arbeitsauftrag"}},"content":"## Allgemeines\n\nSollte ein unvorhergesehenes Ereignis auftreten, so wird eine _Exception_ ausgelöst.\n\n<!-- truncate -->\n\n## Keine Exception\n\nBei folgendem Beispiel wird keine Exception ausgelöst. Folgende Fälle werden berücksichtigt:\n\n- leere Eingabe\n- Texteingabe\n- Eingabe von Zahlen\n\n```cs\nConsole.Write(\"Username: \");\nstring username = Console.ReadLine();\nConsole.WriteLine($\"Username: {username}\");\n```\n\n## Exception bei der Umwandlung von Zeichen\n\nWird eine Zeichenkette fehlerhaft in eine Zahl umgewandelt, so tritt eine `Exception` auf.\n\n![Exception](/images/blog/exception-convert-string-to-int.png)\n\n## try & catch\n\nAusgelöste `Exceptions` können mittels `try` und `catch` bearbeitet werden.\n\n```cs\nConsole.Write(\"Zahl: \");\nstring eingabe = Console.ReadLine();\n\n\ntry {\n\tint zahl = Convert.ToInt32(eingabe);\n\tConsole.WriteLine($\"Zahl: {zahl}\");\n} catch (FormatException ex) {\n\tConsole.WriteLine(\"Bitte kontrollieren Sie die eingegebene Zahl!\");\n\tConsole.WriteLine(ex.Message);\n}\n```\n\n::: danger ACHTUNG\nDie Bearbeitung wird im `try`-Bereich bis zum Auftritt eines Fehlers ersucht. Beim Auftreten eines Fehlers wird **sofort** in den `catch`-Bereich gewechselt.\n:::\n\nDurch die Angabe der genauen `Exception` kann gezielt auf den Fehler reagiert werden. Mittels `ex.Message` kann die Fehlermeldung ausgelesen werden.\n\n## Mehrere catch-Bereiche\n\nFalls mehrere `catch`-Bereiche benötigt werden, können diese an die zuvor erstellten Blöcke gereiht werden.\n\n```cs\nConsole.Write(\"Zahl: \");\nstring eingabe = Console.ReadLine();\n\nint[] zahlen = { 17, 20, 15, 11, 9, 5, 0 };\n\ntry {\n\tint position = Convert.ToInt32(eingabe);\n\tConsole.WriteLine($\"Zahl: {zahlen[position]}\");\n} catch (FormatException ex) {\n\tConsole.WriteLine(\"Bitte kontrollieren Sie die eingegebene Zahl!\");\n\tConsole.WriteLine(ex.Message);\n} catch (IndexOutOfRangeException) {\n\tConsole.WriteLine($\"Bitte geben Sie eine Zahl zwischen 0 & {zahlen.Length - 1} ein!\");\n}\n```\n\nWird im `catch`-Bereich `Exception` angegeben, so handelt es sich um die **Oberklasse** und diese berücksichtigt **alle** Exceptions.\n\n```cs\nConsole.Write(\"Zahl: \");\nstring eingabe = Console.ReadLine();\n\nint[] zahlen = { 17, 20, 15, 11, 9, 5, 0 };\n\ntry {\n\tint position = Convert.ToInt32(eingabe);\n\tConsole.WriteLine($\"Zahl: {zahlen[position]}\");\n} catch (FormatException ex) {\n\tConsole.WriteLine(\"Bitte kontrollieren Sie die eingegebene Zahl!\");\n\tConsole.WriteLine(ex.Message);\n} catch (IndexOutOfRangeException) {\n\tConsole.WriteLine($\"Bitte geben Sie eine Zahl zwischen 0 & {zahlen.Length - 1} ein!\");\n} catch (Exception ex) {\n\tConsole.WriteLine(ex.Message);\n}\n```\n\n## finally\n\nWird ein `finally`-Block verwendet, so wird dieser Block **stets** aufgerufen. Dies bedeutet, dass der `finally`-Block sowohl bei einem Fehler als auch bei einer erfolgreichen Bearbeitung aufgerufen wird.\n\n```cs\nConsole.Write(\"Zahl: \");\nstring eingabe = Console.ReadLine();\n\n\ntry {\n\tint zahl = Convert.ToInt32(eingabe);\n\tConsole.WriteLine($\"Zahl: {zahl}\");\n} catch (FormatException ex) {\n\tConsole.WriteLine(\"Bitte kontrollieren Sie die eingegebene Zahl!\");\n\tConsole.WriteLine(ex.Message);\n}\nfinally {\n\tConsole.WriteLine(\"Vielen Dank!\");\n}\n```\n\n## Eigene Exceptions erstellen\n\nEigene Exceptions können mittels `throw new Exceptin(\"Test der Nachricht\")` ausgelöst werden. Hierbei wird die Oberklasse `Exception` verwendet.\n\nMöchte man eine **eigene Exception** verwenden, so muss eine **Unterklasse** der Exception erstellt werden.\n\n::: tip\nVisual Studio (Windows) erstellt den Inhalt der Unterklasse nach der Angabe der Vererbung automatisch. :wink: :100: :fire: :apple: :relaxed: :mask:\n:::"}]}}